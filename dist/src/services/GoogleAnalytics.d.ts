interface ViewArea {
    width: number;
    height: number;
}
declare type HitType = "pageview" | "screenview" | "event" | "transaction" | "item" | "social" | "exception" | "timing";
declare type ProductAction = "detail" | "click" | "add" | "remove" | "checkout" | "checkout_option" | "purchase" | "refund";
export declare class GoogleAnalytics {
    private trackingId;
    private protocolVersion;
    private params;
    private transient;
    private clientId;
    private endpoint;
    constructor(trackingId: string);
    anonymizeIp(anonymize: boolean): void;
    send(): void;
    setCacheBuster(): void;
    optOut(isOptOut: boolean): void;
    trackEvent(eventCategory: string, eventAction: string, eventLabel?: string, eventValue?: number): void;
    trackPageView(path?: string, url?: string, title?: string): void;
    trackScreenView(screenName: string): void;
    trackSocialInteraction(network: string, action: string, target: string): void;
    setUserTiming(category: string, variable: string, timeMs: number, label?: string): void;
    trackException(description: string, fatal?: boolean): void;
    setCustomDimension(dimensionIndex: number, value: string): void;
    setCustomMetric(metricIndex: number, value: number): void;
    setClientId(): void;
    setUserId(): void;
    startSession(): void;
    endSession(): void;
    overrideIpAddress(ipAddress: string): void;
    overrideUserAgent(userAgent: string): void;
    overrideGeo(geoid: string): void;
    setReferrer(referrer: string): void;
    setCampaignName(campaignName: string): void;
    setCampaignSource(campaignSource: string): void;
    setCampaignMedium(campaignMedium: string): void;
    setCampaignKeyword(campaignKeyword: string): void;
    setCampaignContent(campaignContent: string): void;
    setCampaignId(campaignId: string): void;
    setGoogleAdsId(googleAdsId: string): void;
    setGoogleDisplayAdsId(googleDisplayAdsId: string): void;
    setScreenResolution(screenResolution: ViewArea): void;
    setViewportSize(viewportSize: ViewArea): void;
    setDocumentEncoding(documentEncoding: string): void;
    setScreenColors(screenColors: string): void;
    setUserLanguage(userLanguage: string): void;
    setJavaEnabled(javaEnabled: boolean): void;
    setFlashVersion(flashVersion: string): void;
    setHitType(hitType: HitType): void;
    setNonInteractive(isInteractive: boolean): void;
    setLocationURL(locationURL: string): void;
    setHostName(hostName: string): void;
    setPath(path: string): void;
    setTitle(title: string): void;
    setScreenName(screenName: string): void;
    setContentGroup(contentGroup: number, value: string): void;
    setLinkID(linkID: string): void;
    setAppName(appName: string): void;
    setAppId(appId: string): void;
    setAppVersion(appVersion: string): void;
    setAppInstallerId(appInstallerId: string): void;
    setTransactionId(transactionId: string): void;
    setTransactionAffiliation(transactionAffiliation: string): void;
    setTransactionRevenue(transactionRevenue: number): void;
    setTransactionShipping(transactionShipping: number): void;
    setTransactionTax(transactionTax: number): void;
    setItemName(itemName: string): void;
    setItemPrice(itemPrice: number): void;
    setItemQuantity(itemQuantity: number): void;
    setItemCode(itemCode: string): void;
    setItemCategory(itemCategory: string): void;
    setProductSKU(productIndex: number, value: string): void;
    setProductName(productIndex: number, value: string): void;
    setProductBrand(productIndex: number, value: string): void;
    setProductCategory(productIndex: number, value: string): void;
    setProductVariant(productIndex: number, value: string): void;
    setProductPrice(productIndex: number, value: number): void;
    setProductQuantity(productIndex: number, value: number): void;
    setProductCouponCode(productIndex: number, value: string): void;
    setProductPosition(productIndex: number, value: number): void;
    setProductCustomDimension(productIndex: number, dimensionIndex: number, value: string): void;
    setProductCustomMetric(productIndex: number, metricIndex: number, value: number): void;
    setProductAction(productAction: ProductAction, transactionId?: string, affiliation?: string, revenue?: number, tax?: number, shipping?: number, couponCode?: string, productActionList?: string, checkoutStep?: number, checkoutStepOption?: string): void;
    setProductImpressionListName(listIndex: number, value: string): void;
    setProductImpressionSKU(listIndex: number, productIndex: number, sku: string): void;
    setProductImpressionName(listIndex: number, productIndex: number, name: string): void;
    setProductImpressionBrand(listIndex: number, productIndex: number, brand: string): void;
    setProductImpressionCategory(listIndex: number, productIndex: number, category: string): void;
    setProductImpressionVariant(listIndex: number, productIndex: number, variant: string): void;
    setProductImpressionPosition(listIndex: number, productIndex: number, position: number): void;
    setProductImpressionPrice(listIndex: number, productIndex: number, price: number): void;
    setProductImpressionCustomDimension(listIndex: number, productIndex: number, customDimensionIndex: number, value: string): void;
    setProductImpressionCustomMetric(listIndex: number, productIndex: number, customMetricIndex: number, value: number): void;
    setPromotionId(promoIndex: number, promotionId: string): void;
    setPromotionName(promoIndex: number, promotionName: string): void;
    setPromotionCreative(promoIndex: number, promotionCreative: string): void;
    setPromotionPosition(promoIndex: number, promotionPosition: string): void;
    setPromotionAction(promotionAction: string): void;
    setCurrencyCode(currencyCode: string): void;
    setSocialNetwork(socialNetwork: string): void;
    setSocialAction(socialAction: string): void;
    setSocialActionTarget(socialActionTarget: string): void;
    setPageLoadTime(pageLoadTimeMs: number): void;
    setDNSLookupTime(dnsLookupTimeMs: number): void;
    setPageDownloadTime(downloadTimeMs: number): void;
    setRedirectResponseTime(redirectResponseTimeMs: number): void;
    setTpcConnectTime(tpcConnectTimeMs: number): void;
    setServerResponseTime(serverResponseTimeMs: number): void;
    setDOMInteractiveTime(domInteractiveTimeMs: number): void;
    setContentLoadTime(contentLoadTimeMs: number): void;
    setContentExperiment(experimentId: string, experimentVariant: string): void;
}
export {};
